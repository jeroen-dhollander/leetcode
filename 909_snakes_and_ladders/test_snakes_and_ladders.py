from textwrap import dedent
import unittest

from .snakes_and_ladders import SnakesAndLadders


class SnakesAndLaddersShould(unittest.TestCase):

    def test_retrieve_square_values_of_even_board(self):
        game = SnakesAndLadders([
            [16, 15, 14, 13],
            [9, 10, 11, 12],
            [8, 7, 6, 5],
            [1, 2, 3, 4],
        ])

        for index in range(1, 17):
            self.assertEqual(index, game.square_value(index))

    def test_retrieve_square_values_of_odd_board(self):
        game = SnakesAndLadders([
            [7, 8, 9],
            [6, 5, 4],
            [1, 2, 3],
        ])

        for index in range(1, 10):
            self.assertEqual(index, game.square_value(index))

    _tests = [
        {
            'descr': 'Empty board size 2',
            'board': [
                [-1, -1],
                [-1, -1],
            ],
            'solution': 1,
        },
        {
            'descr': 'Empty board size 3',
            'board': [
                [-1, -1, -1],
                [-1, -1, -1],
                [-1, -1, -1],
            ],
            'solution': 2,
        },
        {
            'descr': 'Empty board size 4',
            'board': [
                [-1, -1, -1, -1],
                [-1, -1, -1, -1],
                [-1, -1, -1, -1],
                [-1, -1, -1, -1],
            ],
            'solution': 3,
        },
        {
            'descr': 'Board with ladder',
            'board': [
                [-1, -1, -1, -1],
                [-1, -1, -1, -1],
                [-1, -1, -1, -1],
                [-1, 15, -1, -1],
            ],
            'solution': 2,
        },
        {
            'descr': 'Example board',
            'board': [
                [-1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1],
                [-1, 35, -1, -1, 13, -1],
                [-1, -1, -1, -1, -1, -1],
                [-1, 15, -1, -1, -1, -1],
            ],
            'solution': 4,
        },
        {
            'descr': 'board of odd size',
            'board': [
                [1, 1, -1],
                [1, 1, 1],
                [-1, 1, 1],
            ],
            'solution': -1,
        },
        {
            'descr': 'check we can roll a 6',
            'board': [
                [-1, 1, 2, -1],  # 16, 15, 14, 13
                [2, 13, 15, -1],  # 9, 10, 11, 12
                [-1, 10, -1, -1],  # 8, 7, 6, 5
                [-1, 6, 2, 8],  # 1, 2, 3, 4
            ],
            'solution': 2,
        },
        {
            'descr': 'Cannot take 2 ladders without moving',
            'board': [
                [-1, -1, 27, 13, -1, 25, -1],  # 43, 44, 45, 46, 47, 48, 49
                [-1, -1, -1, -1, -1, -1, -1],  # 42, 41, 40, 39, 38, 37, 36
                [44, -1, 8, -1, -1, 2, -1],  # 29, 30, 31, 32, 33, 34, 35
                [-1, 30, -1, -1, -1, -1, -1],  # 28, 27, 26, 25, 24, 23, 22
                [3, -1, 20, -1, 46, 6, -1],  # 15, 16, 17, 18, 19, 20, 21
                [-1, -1, -1, -1, -1, -1, 29],  # 14, 13, 12, 11, 10, 9, 8
                [-1, 29, 21, 33, -1, -1, -1],  # 1, 2, 3, 4, 5, 6, 7
            ],
            'solution': 4,
        },
        {
            'descr': 'Square 35 can be reached by ladder and by moving in same number of steps (and has ladder to finish)',
            'board': [
                [-1, -1, -1, -1, 48, 5, -1],  # 43, 44, 45, 46, 47, 48, 49
                [12, 29, 13, 9, -1, 2, 32],  # 42, 41, 40, 39, 38, 37, 36
                [-1, -1, 21, 7, -1, 12, 49],  # 29, 30, 31, 32, 33, 34, 35
                [42, 37, 21, 40, -1, 22, 12],  # 28, 27, 26, 25, 24, 23, 22
                [42, -1, 2, -1, -1, -1, 6],  # 15, 16, 17, 18, 19, 20, 21
                [39, -1, 35, -1, -1, 39, -1],  # 14, 13, 12, 11, 10, 9, 8
                [-1, 36, -1, -1, -1, -1, 5],  # 1, 2, 3, 4, 5, 6, 7
            ],
            'solution': 3,  # 1 -> 2 (ladder to 36) -> 41 (snake to 29) -> 35 (ladder to 49)
        },
        {
            'descr': 'Big example',
            'board': [
                [-1, 240, -1, 116, -1, -1, -1, -1, 188, -1, -1, -1, 258, 46, 117, -1, -1, -1, -1, -1],
                [48, -1, -1, -1, -1, -1, 313, -1, -1, -1, -1, -1, 386, -1, -1, -1, 50, -1, -1, -1],
                [-1, -1, -1, 334, -1, -1, 259, 212, -1, 314, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [161, -1, -1, -1, 397, -1, -1, -1, -1, -1, -1, 225, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 267, -1, -1, -1, -1, -1, -1, 22, -1],
                [-1, -1, -1, -1, 149, -1, -1, -1, 203, -1, 125, -1, -1, 38, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, 316, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1],
                [-1, -1, 238, -1, -1, -1, -1, 320, -1, -1, -1, -1, -1, 281, -1, -1, -1, -1, -1, -1],
                [-1, -1, -1, -1, 302, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [284, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 339, 248, -1, 190, -1, -1, -1],
                [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 290, -1, 388, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, 128, -1, -1, -1, -1, -1, -1, -1, 375, -1, -1, -1, 358, -1, -1],
                [282, 384, -1, -1, -1, -1, -1, 45, -1, 129, -1, -1, -1, -1, -1, -1, -1, -1, -1, 189],
                [-1, -1, -1, -1, -1, -1, 207, -1, -1, 141, -1, -1, -1, -1, -1, -1, 242, -1, -1, -1],
                [-1, 154, 227, -1, -1, -1, -1, -1, -1, -1, 326, -1, -1, -1, 191, -1, -1, 373, -1, -1],
                [-1, -1, 123, -1, 62, -1, -1, -1, -1, -1, 395, -1, -1, -1, -1, 337, -1, -1, -1, -1],
                [-1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, 315, 228, -1, -1, -1],
                [-1, -1, 84, -1, -1, 9, -1, -1, -1, -1, -1, -1, 305, 98, -1, 276, -1, -1, -1, 386],
                [-1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                [-1, -1, 57, -1, -1, -1, -1, -1, 271, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
            ],
            'solution': 5,
        }
    ]

    def test(self):
        for test in self._tests:
            game = SnakesAndLadders(test['board'])
            expected = test['solution']
            game.solve()
            actual = game.num_steps_to_end

            self.assertEqual(
                expected, actual,
                dedent('''
                    FAILED test {description}:
                    Board:
                        {board}
                    Final path:
                        {path}
                ''').format(
                    description=test['descr'],
                    board='\n    '.join(str(row) for row in game.board),
                    path=str(game.shortest_path_to_end),
                )
            )


if __name__ == '__main__':
    unittest.main()
